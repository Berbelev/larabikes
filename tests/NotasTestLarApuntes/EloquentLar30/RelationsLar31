LAR 31 ELOQUENT 2 ============================================================================
==============================================================================================

    RELACCIÓN 1 A N ==========================================================================

        ELOQUENT/RELATIONS ===================================================================

            hasMany(), belongsTo(), hasOne() y belongsTomany()
                -> retornan una instancia de una clase en el namespace:
                    -> Illuminate\Database\Eloquent\Relations

                            // Ejemplo con hasMany
                            User::find(1)->hasMany('Bike');
                            => Illuminate\Database\Eloquent\Relations\HasMany {#4373}

                    -> Estos objetos actúan como un query builder
                        -> Pudiendose aplicar sus métodos para filtrar resultados
                            ->(where(), orderBy(), limit()...).

                                User::find(1)->hasMany('Bike')->where('marca', 'CAPSULE')->get();


    RELACCIÓN 1 A 1 ==========================================================================

        hasOne()

                $cd = ConcatData::create([
                    'fijo'=>'93666555',
                    'movil'=>'666555444',
                    'direccion'=>'C/ Los Pinos',
                    'user_id'=>1
                ]);
                => App\Models\ConcatData {#3656
                    fijo: "93666555",
                    movil: "666555444",
                    direccion: "C/ Los Pinos",
                    user_id: 1,
                    updated_at: "2022-11-01 02:15:49",
                    created_at: "2022-11-01 02:15:49",
                    id: 2,
                }



                User::find(1)->hasOne('ConcatData')->get();
                [!] Aliasing 'User' to 'App\Models\User' for this Tinker session.
                => Illuminate\Database\Eloquent\Collection {#4590
                    all: [
                    App\Models\ConcatData {#4337
                        id: 2,
                        movil: "666555444",
                        fijo: "93666555",
                        direccion: "C/ Los Pinos",
                        user_id: 1,
                        created_at: "2022-11-01 02:15:49",
                        updated_at: "2022-11-01 02:15:49",
                    },
                    ],
                }


                ConcatData::find(2)->hasOne('User', 'id', 'user_id')->get();
                => Illuminate\Database\Eloquent\Collection {#3975
                    all: [
                    App\Models\User {#4592
                        id: 1,
                        name: "Eva",
                        username: null,
                        email: "evabema@gmail.com",
                        email_verified_at: "2022-10-24 23:11:23",
                        #password: "$2y$10$MdH2wU2y5LGfHBe1u7S/o.Fi/IW.4zJOCEXflxw9Jk04NJvnyBOnq",
                        #remember_token: "kV69oO13MOJDHv5WM9STzh49CVVByxaGBGmsP0BwX6pAtCsoVyZy8FliOTXy",
                        created_at: "2022-10-24 07:16:02",
                        updated_at: "2022-10-25 03:19:07",
                    },
                    ],
                }

    RELACCIÓN N A N ==========================================================================

        belongsToMany()

            // buscando roles de los usuarios
            User::find(1)->roles;

            // buscando usuarios con un rol concreto
            Role::find(4)->users;

        ======================================================================

        Resultado Pasando string

            User::find(1)->hasRole('administrador');

            User::find(1)->hasRole('moderador');

            User::find(1)->hasRole('todopoderoso');

            User::find(1)->hasRole('bloqueado');


        Resultado Pasando un array

            User::find(1)->hasRole(['foo','administrador']);

            User::find(1)->hasRole(['foo','moderador']);

            User::find(1)->hasRole(['foo','todopoderoso']);

            User::find(1)->hasRole(['todopoderoso','bloqueado']);


    ROLES QUE NO TIENE UN USUARIO ======================================================

        User::find(1)->remainingRoles();

    AÑADIENDO ROLES ====================================================================

        -> Para añadir un rol a un usuario
            -> hay que realizar un insert en la tabla intermedia

                $user = User::find(5);
                $role = Role::find(3);

                // añade el rol al usuario
                DB::table('role_user')->insert([
                    'user_id' => $user->id,
                    'role_id' => $role->id
                ]);

    QUITANDO ROLES ====================================================================

        -> Para quitar un rol a un usuario
            -> hay que realizar un delete en la tabla intermedia

                $user = User::find(5);
                $role = Role::find(3);

                // elimina el rol al usuario
                DB::table('role_user')->where([
                    'user_id' => $user->id,
                    'role_id' => $role->id
                ])->delete();


    MÉTODOS attach() y detach() =======================================================
        -> para las operaciones de inserción y borrado de la tabla intermedia.
        -> Si los nombres de la tabla intermedia y sus claves foráneas son adeacuados.
            -> El nombre de la tabla intermedia son los nombres de las tablas relacionadas en orden alfabético.
                -> las clasves foraneas "nametabla_id" relaccionada con el id en la tabla "nametablas"...

                    attach()
                        -> Se puede añadir información adicional mediante un array.

                            $user = User::find(5);
                            $role = Role::find(3);

                            $user->roles()->attach($role->id, [
                                'created_at' =now(),
                                'updated' =now()
                            ]);




                    detach()

                        $user = User::find(5);
                        $role = Role::find(3);

                        $user->roles()->detach($role->id);

    CONSULTAR DOC LARAVEL ELOQUENT: RELATIONSHIPS ====================================





